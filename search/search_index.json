{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"datamodel-code-generator This code generator creates pydantic model from an openapi file and others. Help See documentation for more details. Supported source types OpenAPI 3 (YAML/JSON) JSON Schema JSON/YAML Data (it will be converted to JSON Schema) Implemented list OpenAPI 3 and JsonSchema DataType string (include patter/minLength/maxLenght) number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) boolean array object String Format date datetime password email uuid (uuid1/uuid2/uuid3/uuid4/uuid5) ipv4 ipv6 hostname decimal Other schema enum allOf (as Multiple inheritance) anyOf (as Union) oneOf (as Union) $ref (exclude URL Reference) Installation To install datamodel-code-generator : $ pip install datamodel-code-generator Usage The datamodel-codegen command: usage : datamodel - codegen [- h ] [-- input INPUT ] [-- output OUTPUT ] [-- base - class BASE_CLASS ] [-- custom - template - dir CUSTOM_TEMPLATE_DIR ] [-- extra - template - data EXTRA_TEMPLATE_DATA ] [-- target - python - version { 3.6 , 3.7 }] [-- debug ] [-- validation Enable validation ( Only OpenAPI )] [-- version ] optional arguments : - h , -- help show this help message and exit -- input INPUT Input file ( default : stdin ) -- input - file - type { auto , openapi , jsonscehma , json , yaml } -- output OUTPUT Output file ( default : stdout ) -- base - class BASE_CLASS Base Class ( default : pydantic . BaseModel ) -- custom - template - dir CUSTOM_TEMPLATE_DIR Custom Template Directory -- extra - template - data EXTRA_TEMPLATE_DATA Extra Template Data -- target - python - version { 3.6 , 3.7 } target python version ( default : 3.7 ) -- validation Enable validation ( Only OpenAPI ) -- debug show debug message -- version show version Example OpenAPI $ datamodel-codegen --input api.yaml --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ] PyPi https://pypi.org/project/datamodel-code-generator License datamodel-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license This project is an experimental phase.","title":"Overview"},{"location":"#datamodel-code-generator","text":"This code generator creates pydantic model from an openapi file and others.","title":"datamodel-code-generator"},{"location":"#help","text":"See documentation for more details.","title":"Help"},{"location":"#supported-source-types","text":"OpenAPI 3 (YAML/JSON) JSON Schema JSON/YAML Data (it will be converted to JSON Schema)","title":"Supported source types"},{"location":"#implemented-list","text":"","title":"Implemented list"},{"location":"#openapi-3-and-jsonschema","text":"","title":"OpenAPI 3 and JsonSchema"},{"location":"#datatype","text":"string (include patter/minLength/maxLenght) number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) boolean array object","title":"DataType"},{"location":"#string-format","text":"date datetime password email uuid (uuid1/uuid2/uuid3/uuid4/uuid5) ipv4 ipv6 hostname decimal","title":"String Format"},{"location":"#other-schema","text":"enum allOf (as Multiple inheritance) anyOf (as Union) oneOf (as Union) $ref (exclude URL Reference)","title":"Other schema"},{"location":"#installation","text":"To install datamodel-code-generator : $ pip install datamodel-code-generator","title":"Installation"},{"location":"#usage","text":"The datamodel-codegen command: usage : datamodel - codegen [- h ] [-- input INPUT ] [-- output OUTPUT ] [-- base - class BASE_CLASS ] [-- custom - template - dir CUSTOM_TEMPLATE_DIR ] [-- extra - template - data EXTRA_TEMPLATE_DATA ] [-- target - python - version { 3.6 , 3.7 }] [-- debug ] [-- validation Enable validation ( Only OpenAPI )] [-- version ] optional arguments : - h , -- help show this help message and exit -- input INPUT Input file ( default : stdin ) -- input - file - type { auto , openapi , jsonscehma , json , yaml } -- output OUTPUT Output file ( default : stdout ) -- base - class BASE_CLASS Base Class ( default : pydantic . BaseModel ) -- custom - template - dir CUSTOM_TEMPLATE_DIR Custom Template Directory -- extra - template - data EXTRA_TEMPLATE_DATA Extra Template Data -- target - python - version { 3.6 , 3.7 } target python version ( default : 3.7 ) -- validation Enable validation ( Only OpenAPI ) -- debug show debug message -- version show version","title":"Usage"},{"location":"#example","text":"","title":"Example"},{"location":"#openapi","text":"$ datamodel-codegen --input api.yaml --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ]","title":"OpenAPI"},{"location":"#pypi","text":"https://pypi.org/project/datamodel-code-generator","title":"PyPi"},{"location":"#license","text":"datamodel-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"License"},{"location":"#this-project-is-an-experimental-phase","text":"","title":"This project is an experimental phase."},{"location":"development-contributing/","text":"Development Install the package in editable mode: $ git clone git@github.com:koxudaxi/datamodel-code-generator.git $ pip install -e datamodel-code-generator Contribute We are waiting for your contributions to datamodel-code-generator . How to contribute ## 1. Clone your fork repository $ git clone git@github.com:<your username>/datamodel-code-generator.git $ cd datamodel-code-generator ## 2. Create `venv` with python3.7 (also you should do with python3.6) $ python3.7 -m venv venv37 $ source venv37/bin/activate ## 3. Install dependencies $ python3 -m pip install \".[all]\" ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ ./scripts/test.sh ## 6. Format code $ ./scripts/format.sh ## 7. Check lint (mypy) $ ./scripts/lint.sh ## 8. Commit and Push...","title":"Development-Contributing"},{"location":"development-contributing/#development","text":"Install the package in editable mode: $ git clone git@github.com:koxudaxi/datamodel-code-generator.git $ pip install -e datamodel-code-generator","title":"Development"},{"location":"development-contributing/#contribute","text":"We are waiting for your contributions to datamodel-code-generator .","title":"Contribute"},{"location":"development-contributing/#how-to-contribute","text":"## 1. Clone your fork repository $ git clone git@github.com:<your username>/datamodel-code-generator.git $ cd datamodel-code-generator ## 2. Create `venv` with python3.7 (also you should do with python3.6) $ python3.7 -m venv venv37 $ source venv37/bin/activate ## 3. Install dependencies $ python3 -m pip install \".[all]\" ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ ./scripts/test.sh ## 6. Format code $ ./scripts/format.sh ## 7. Check lint (mypy) $ ./scripts/lint.sh ## 8. Commit and Push...","title":"How to contribute"},{"location":"formatting/","text":"Formatting Code generated by datamodel-codegen will be passed through isort and black to produce consistent, well-formatted results. Settings for these tools can be specified in pyproject.toml (located in the output directory, or in some parent of the output directory). Example pyproject.toml : [tool.black] skip-string-normalization = true line-length = 100 [tool.isort] multi_line_output = 3 include_trailing_comma = true force_grid_wrap = 0 use_parentheses = true line_length = 100 known_first_party = \"kelvin\" See the Black Project for more information.","title":"Formatting"},{"location":"formatting/#formatting","text":"Code generated by datamodel-codegen will be passed through isort and black to produce consistent, well-formatted results. Settings for these tools can be specified in pyproject.toml (located in the output directory, or in some parent of the output directory). Example pyproject.toml : [tool.black] skip-string-normalization = true line-length = 100 [tool.isort] multi_line_output = 3 include_trailing_comma = true force_grid_wrap = 0 use_parentheses = true line_length = 100 known_first_party = \"kelvin\" See the Black Project for more information.","title":"Formatting"},{"location":"jsondata/","text":"Generate from JsonData The codegen generate pydantic models from JSON Data Example $ datamodel-codegen --input pets.json --input-file-type json --output model.py pets.json : { \"pets\" : [ { \"name\" : \"dog\" , \"age\" : 2 }, { \"name\" : \"cat\" , \"age\" : 1 }, { \"name\" : \"snake\" , \"age\" : 3 , \"nickname\" : \"python\" } ], \"status\" : 200 } model.py : # generated by datamodel-codegen: # filename: pets.json # timestamp: 2020-04-27T16:08:21+00:00 from __future__ import annotations from typing import List , Optional from pydantic import BaseModel class Pet ( BaseModel ): name : str age : int nickname : Optional [ str ] = None class Model ( BaseModel ): pets : List [ Pet ] status : int","title":"Generate from JSON Data"},{"location":"jsondata/#generate-from-jsondata","text":"The codegen generate pydantic models from JSON Data","title":"Generate from JsonData"},{"location":"jsondata/#example","text":"$ datamodel-codegen --input pets.json --input-file-type json --output model.py pets.json : { \"pets\" : [ { \"name\" : \"dog\" , \"age\" : 2 }, { \"name\" : \"cat\" , \"age\" : 1 }, { \"name\" : \"snake\" , \"age\" : 3 , \"nickname\" : \"python\" } ], \"status\" : 200 } model.py : # generated by datamodel-codegen: # filename: pets.json # timestamp: 2020-04-27T16:08:21+00:00 from __future__ import annotations from typing import List , Optional from pydantic import BaseModel class Pet ( BaseModel ): name : str age : int nickname : Optional [ str ] = None class Model ( BaseModel ): pets : List [ Pet ] status : int","title":"Example"},{"location":"jsonschema/","text":"Generate from JsonSchema The codegen generate pydantic models from JSON Schema Example $ datamodel-codegen --input person.json --input-file-type jsonschema --output model.py person.json : { \"$id\" : \"https://example.com/person.schema.json\" , \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Person\" , \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 }, \"friends\" : { \"type\" : \"array\" }, \"comment\" : { \"type\" : \"null\" } } } model.py : # generated by datamodel-codegen: # filename: person.json # timestamp: 2020-04-27T16:12:27+00:00 from __future__ import annotations from typing import Any , List , Optional from pydantic import BaseModel , Field , conint class Person ( BaseModel ): firstName : Optional [ str ] = Field ( None , description = \"The person's first name.\" ) lastName : Optional [ str ] = Field ( None , description = \"The person's last name.\" ) age : Optional [ conint ( ge = 0 )] = Field ( None , description = 'Age in years which must be equal to or greater than zero.' ) friends : Optional [ List ] = None comment : Optional [ Any ] = None","title":"Generate from JSON Schema"},{"location":"jsonschema/#generate-from-jsonschema","text":"The codegen generate pydantic models from JSON Schema","title":"Generate from JsonSchema"},{"location":"jsonschema/#example","text":"$ datamodel-codegen --input person.json --input-file-type jsonschema --output model.py person.json : { \"$id\" : \"https://example.com/person.schema.json\" , \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Person\" , \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 }, \"friends\" : { \"type\" : \"array\" }, \"comment\" : { \"type\" : \"null\" } } } model.py : # generated by datamodel-codegen: # filename: person.json # timestamp: 2020-04-27T16:12:27+00:00 from __future__ import annotations from typing import Any , List , Optional from pydantic import BaseModel , Field , conint class Person ( BaseModel ): firstName : Optional [ str ] = Field ( None , description = \"The person's first name.\" ) lastName : Optional [ str ] = Field ( None , description = \"The person's last name.\" ) age : Optional [ conint ( ge = 0 )] = Field ( None , description = 'Age in years which must be equal to or greater than zero.' ) friends : Optional [ List ] = None comment : Optional [ Any ] = None","title":"Example"},{"location":"openapi/","text":"Generate from OpenAPI The codegen generate pydantic models from OpenAPI Example $ datamodel-codegen --input api.yaml --input-file-type openapi --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ]","title":"Generate from OpenAPI"},{"location":"openapi/#generate-from-openapi","text":"The codegen generate pydantic models from OpenAPI","title":"Generate from OpenAPI"},{"location":"openapi/#example","text":"$ datamodel-codegen --input api.yaml --input-file-type openapi --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ]","title":"Example"},{"location":"support-data-types/","text":"Implemented list This codegen supports major data types to OpenAPI/JSON Schema OpenAPI 3 and JsonSchema DataType string (include patter/minLength/maxLenght) number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) boolean array object String Format date datetime password email uuid (uuid1/uuid2/uuid3/uuid4/uuid5) ipv4 ipv6 hostname decimal Other schema enum allOf (as Multiple inheritance) anyOf (as Union) oneOf (as Union) $ref (exclude URL Reference)","title":"Support data types"},{"location":"support-data-types/#implemented-list","text":"This codegen supports major data types to OpenAPI/JSON Schema","title":"Implemented list"},{"location":"support-data-types/#openapi-3-and-jsonschema","text":"","title":"OpenAPI 3 and JsonSchema"},{"location":"support-data-types/#datatype","text":"string (include patter/minLength/maxLenght) number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) boolean array object","title":"DataType"},{"location":"support-data-types/#string-format","text":"date datetime password email uuid (uuid1/uuid2/uuid3/uuid4/uuid5) ipv4 ipv6 hostname decimal","title":"String Format"},{"location":"support-data-types/#other-schema","text":"enum allOf (as Multiple inheritance) anyOf (as Union) oneOf (as Union) $ref (exclude URL Reference)","title":"Other schema"}]}